*********************************************************************************************************DAY 23********************************************************************************************************************************************************

dotnet add package AutoMapper --version 10.1.1

private const string cs = "Host=localhost;Port=5432;User ID=postgres;Password=1234;Database=Userdb;Pooling=true";

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
POCO Entities (Plain Old CLR Object)

A POCO entity is a class that doesn't depend on any framework-specific base class. It is like any other normal .



https://www.entityframeworktutorial.net/efcore/configure-one-to-many-relationship-using-fluent-api-in-ef-core.aspx

https://www.learnentityframeworkcore.com/configuration/fluent-api


=========================================================================================================================================================================================================================================================================================


||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
dotnet ef dbcontext scaffolding connectionString Microsoft.entityframeworkcore 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////









                                     *****************************************************************************************DAY 24*****************************************************************************************************







+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL --version 5.0.7

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Final connection string+++=>>>>>

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
      "PostgreSqlConnectionString": "Host=localhost;Port=5432;User ID=postgres;Password=1234;Database=userMgmt;Pooling=true;"
    }
  }


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

dotnet ef database update
dotnet add package Microsoft.EntityFrameworkCore.tools

dotnet add package Microsoft.EntityFrameworkCore.Design
dotnet ef migrations add Phase1
====+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++




dotnet add package fluentvalidation.aspnetcore
in startup.cs

services.AddControllers()
            .AddFluentValidation(t=>t.RegisterValidatorsFromAssemblyContaining<UserValidator>());


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


services.AddDbContext<UserDbContext>(t=>t.UseNpgsql(Configuration.GetConnectionString("")));










*****************************************************************************************************************DAY 25********************************************************************************************************



https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2


https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/attribute-routing-in-web-api-2


dotnet add package fluentvalidation.aspnetcore


https://fluentvalidation.net/aspnet





|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||





in startup.cs

services.AddControllers()
            .AddFluentValidation(t=>t.RegisterValidatorsFromAssemblyContaining<UserValidator>());





||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||




using System;
using System.Threading.Tasks;
using System.Threading;

namespace TPL
{
    class MyApp
    {
        public static void longTask()//act as dbcontext
        {
            Thread.Sleep(20000); // sleep for 20 sec
            
        }

        public static void myCall() //act as repository
        {
            longTask();
        }
       
              
        public static void Main()  // act as controller
        {
           myCall();
        }
    }
}

       









************************************************************************************************************** DAY 26********************************************************************************************************************************************************







Packages To Install:
==================================================================
dotnet add package Microsoft.EntityFrameworkCore

dotnet add package Microsoft.EntityFrameworkCore.Design

dotnet add package Microsoft.EntityFrameworkCore.Tools

dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL
==================================================================



When to use Dictionary, HashTable or List???

Difference between IEnumerable and IQuearable??

Cascade Principle in Database??




======================================================================

using Microsoft.EntityFrameworkCore.Metadata.Builders;//  fluent API

========================================================================






--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Final connection string+++=>>>>>

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
      "PostgreSqlConnectionString": "Host=localhost;Port=5432;User ID=postgres;Password=1234;Database=userMgmt;Pooling=true;"
    }
  }
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



==================================================================================
in startup.cs:

services.AddDbContext<UserDbContext>(t=>t.UseNpgsql(Configuration.GetConnectionString("")));
==================================================================================



===================================================================================
dotnet tool install --global dotnet-ef
===================================================================================

dotnet add package Microsoft.EntityFrameworkCore
dotnet add package Microsoft.EntityFrameworkCore.design
dotnet add package Microsoft.EntityFrameworkCore.Tools
dotnet add package Npgsql.EntityFrameworkCore.PostgreSql
dotnet ef database update 
dotnet tool install --global dotnet-ef
dotnet ef migrations add test
dotnet ef database update


======================================================================================



**************************************************************************************************************************************Day28****************************************************************************************************


Day 28: Roadmap:


----------------------------------------------------------------------------------------------------------
ASynchronous controller in dotnet core(TPL).
Dyanamic Migration
How to handle the exception???
How to apply proper exception handling???
How to secure the controller in core web api using custom middleware??
***How to maintain the Log??(Package Nlog).
***How to apply Filters??

-------------------------------------------------------------------------------------------------------------


Major Linq query for Practice:

1) LazyLoading and Eager Loading
2) Deffered execution
3) Joins between two DbSet.

---------------------------------------------------------------------------------------------------------------

*********How to call Database procedure, function, view in ef- Core???





