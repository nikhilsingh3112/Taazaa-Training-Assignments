the above program which we have written earlier, it is just synchronous (one after one ) programming, So we can convert synchronous to asynchronous by two ways.

1. Multi threading
2 Task Parallel Library(T.P.L)



Server [localhost]:
Database [postgres]:
Port [5432]:
Username [postgres]:
Password for user postgres:
psql (13.4)
WARNING: Console code page (437) differs from Windows code page (1252)
         8-bit characters might not work correctly. See psql reference
         page "Notes for Windows users" for details.
Type "help" for help.

postgres=# \c usermanagement
You are now connected to database "usermanagement" as user "postgres".
usermanagement=# create database taazaadbs;
CREATE DATABASE
usermanagement=# \c taazaadbs
You are now connected to database "taazaadbs" as user "postgres".
taazaadbs=# create table tbl_users
taazaadbs-# (
taazaadbs(# username character varying(50) NOT NULL primary key,
taazaadbs(# password character varying(30)
taazaadbs(# )
taazaadbs-# ;
CREATE TABLE
taazaadbs=# select * from tbl_users;
 username | password
----------+----------
(0 rows)


taazaadbs=# insert into tbl_users values('Ganesh','Test123');
INSERT 0 1
taazaadbs=# insert into tbl_users values('Sachin','Sach123');
INSERT 0 1
taazaadbs=# select * from tbl_users;
 username | password
----------+----------
 Ganesh   | Test123
 Sachin   | Sach123
(2 rows)


========================================================

taazaadbs=# create function uservalidates(uname character varying, upass character varying)
taazaadbs-# returns integer
taazaadbs-# AS
taazaadbs-# $$
taazaadbs$# Begin
taazaadbs$# if (select count(*) from tbl_users where username = uname AND password = upass)>0 then
taazaadbs$# return 1;
taazaadbs$# else
taazaadbs$# return 0;
taazaadbs$# end if;
taazaadbs$# end;
taazaadbs$# $$
taazaadbs-# language plpgsql;
CREATE FUNCTION
taazaadbs=# select uservalidates('Ganesh','Test123');
 uservalidates
---------------
             1
(1 row)


taazaadbs=#
















================================================================================================================
taazaadbs=# drop table if exists accounts;
NOTICE:  table "accounts" does not exist, skipping
DROP TABLE
taazaadbs=# create table accounts (
taazaadbs(#     id int generated by default as identity,
taazaadbs(#     name varchar(100) not null,
taazaadbs(#     balance dec(15, 2) not null,
taazaadbs(#     primary key(id)
taazaadbs(# );
CREATE TABLE
taazaadbs=# insert into accounts(name, balance)
taazaadbs-# values('Raju', 10000);
INSERT 0 1
taazaadbs=#
taazaadbs=# insert into accounts(name, balance)
taazaadbs-# values('Nikhil', 10000);
INSERT 0 1
taazaadbs=# select * from accounts;
 id |  name  | balance
----+--------+----------
  1 | Raju   | 10000.00
  2 | Nikhil | 10000.00
(2 rows)



taazaadbs=# create  procedure transfer(
taazaadbs(#    sender int,
taazaadbs(#    receiver int,
taazaadbs(# amount dec
taazaadbs(# )
taazaadbs-# language plpgsql
taazaadbs-# as $$
taazaadbs$# begin
taazaadbs$#     update accounts
taazaadbs$#     set balance = balance - amount
taazaadbs$#     where id = sender;
taazaadbs$#     update accounts
taazaadbs$#     set balance = balance + amount
taazaadbs$#     where id = receiver;
taazaadbs$#     commit;
taazaadbs$# end;$$;
CREATE PROCEDURE
taazaadbs=# call transfer(1, 2, 1000);
CALL
taazaadbs=# SELECT * FROM accounts;
 id |  name  | balance
----+--------+----------
  1 | Raju   |  9000.00
  2 | Nikhil | 11000.00
(2 rows)


taazaadbs=#
